---
title: 'APSTA-2013: Final Project'
author: "William Spagnola"
date: "3/15/2019"
output: pdf_document
---

```{r Setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(mice)
library(tidyverse)
library(naniar)
library(stargazer)
library(mi)
library(HotDeckImputation)
library(knitr)
```


**0. Find a suitable dataset with missing observations. Ideally, it should have at least 100 observations, and at least 3-4 variables, both numerical and categorical, of which at least one numerical variable is completely observed. You also need to think what you want to do with the data. That is, what model you want to run, what you want to estimate, and which variable you want to predict by the rest.**

**After each of the following tasks, you need to implement the analysis you have in mind and report the results/estimates.**

# PART A: INTRODUCTION

```{r Clean Data}
set.seed(2013)
### Load Data 
risk_sub <- read.csv('Data/risk_sub.csv')
rownames(risk_sub) <- NULL

#Convert to Binary
risk_sub$health_cover <- ifelse(risk_sub$health_cover=='Yes', 1, 0)
risk_sub$health_good <- ifelse(risk_sub$health_general %in% c('Excellent', 'VeryGood', 'Good'), 1, 0)

#Drop IdCategorical Health and Smoking Variable 
risk_sub <- risk_sub[, -which(names(risk_sub) %in% c('id', 'health_general', 'smoke_days'))]
```



#### Create Missing Data Pattern Matrix
```{r Missing Data Pattern Matrix}

#Generate Patterns of Rows with 2 missing variables
mixed_missing_patterns_1 <- c(1, 0, 0)
mixed_missing_patterns_2 <- c(0, 1, 0 )
mixed_missing_patterns_3 <- c(0, 0, 1 )


pattern_matrix <- rbind(ampute.default.patterns(3),
                        mixed_missing_patterns_1, mixed_missing_patterns_2,
                        mixed_missing_patterns_3)
row.names(pattern_matrix) <- NULL
pattern_matrix
```

#### Use Ampute Function
```{r Ampute Function}
#Get Indices of Columns to Generate MAR
MAR_idx <- which(names(risk_sub) %in% c('bmi', 'health_good', 'health_cover'))

#Get index of Rows to Generate MAR
missing_row_idx <- complete.cases(risk_sub[ , MAR_idx])

#Create new data.frame to use for MAR data
risk_MAR <- risk_sub

#Use ampute function to generate missing data in bmi and health_cover columns
a <- ampute(risk_sub[ missing_row_idx , MAR_idx],
            bycases = F,
            prop = .16)

#WITH DIFFERENT MISSING DATA PATTERNS
#Use ampute function to generate missing data in bmi and health_cover columns
# a <- ampute(risk_sub[ missing_row_idx , MAR_idx], 
#             bycases = F, 
#             pattern = pattern_matrix,
#             prop = .2)

#Replace data with MAR data generated by ampute function
risk_MAR[missing_row_idx , MAR_idx ] <-  a$amp

```


### Examine Missing Data
```{r Examine Missing Data}
miss_prop_summary(risk_MAR)
miss_var_summary(risk_MAR)
```



# PART B:  METHODS


#### 1. Listwise deletion.
```{r Listwise Deletion Method}

risk_CC <- cc(risk_MAR)
fit_list_wise <-glm(health_good ~ bmi + age + health_cover, 
            data =risk_CC, family = binomial(link = 'logit'))
summary(fit_list_wise)
```


**Report Formula for listwise deletion model**
$$HEALTH\_GOOD = 2.27 +  -0.01*BMI + -0.03*AGE +  0.66*HEALTH\_COVER$$


### 2. Mean/mode imputation.
```{r Mean/Mode Imputation}
#Function for Mean Imputation
mean.imp <- function (a){
  missing <- is.na(a)
  a.obs <- a[!missing]
  imputed <- a
  imputed[missing] <- mean(a.obs)
  return (imputed)
}

#Function for Mode 
mode = function(x) {
  ta = table(x)
  tam = max(ta)
  if (all(ta == tam))
    mod = NA
  else
    mod = names(ta)[ta == tam]
  return(mod)
}


#Function for Mode Imputation
mode.imp <- function (a) {
  missing <- is.na(a)
  a.obs <- a[!missing]
  imputed <- a
  imputed[missing] <- mode(a.obs)
  # Output the imputed vector
  return(imputed)
}

#Create A Duplicate Dataset
risk_imp_mean <- risk_MAR

#Apply Mode Imputation to Indicator Variables (Health_Good & Health_Cover)
risk_imp_mean$health_cover <- as.integer(mode.imp(risk_MAR$health_cover))
risk_imp_mean$health_good <- as.integer(mode.imp(risk_MAR$health_good))

#Apply Mean Imputation to Continuous Variables (BMI)
risk_imp_mean$bmi <- mean.imp(risk_MAR$bmi)

#Perform Analysis
fit_imp_mean_mode <- glm(health_good ~ health_cover +bmi + age, 
                         data = risk_imp_mean, 
                         family = binomial(link = 'logit'))
summary(fit_imp_mean_mode)
```

#### Equation: Mean/Mode Imputation  
$$HEALTH\_GOOD =   2.05 + 1.24*HEALTH\_COVER + -0.01*BMI + - 0.03*AGE$$

### 3. Random imputation.
```{r Random Imputation}


## Simple random imputation
random.imp <- function (a){
  missing <- is.na(a)
  n.missing <- sum(missing)
  a.obs <- a[!missing]
  imputed <- a
  imputed[missing] <- sample(a.obs, n.missing, replace=TRUE)
  return (imputed)
}

#Perform Random Imputation
risk_imp_rand <- risk_MAR
risk_imp_rand$bmi <- random.imp(risk_MAR$bmi)
risk_imp_rand$health_cover <- random.imp(risk_MAR$health_cover)
risk_imp_rand$health_good <- random.imp(risk_MAR$health_good)

#Perform Analysis
fit_imp_rand <- glm(health_good ~ health_cover + bmi + age, 
                         data = risk_imp_rand, 
                         family = binomial(link = 'logit'))
summary(fit_imp_rand)

```
#### Equation: Random Imputation 
$$HEALTH\_GOOD = 2.46 + 0.36*HEALTH\_COVER + -0.02*BMI + -0.02*AGE$$

#### 4. Dummy variable on predictor variables.
```{r}

#Create Indicator Variabler
health_cover_missing <- is.na(risk_MAR$health_cover)*1
bmi_missing <- is.na(risk_MAR$bmi)*1

risk_dummy <- risk_MAR

#Add arbitrary number for missing values of predictors
risk_dummy[bmi_missing == 1,] <- 0
risk_dummy[health_cover_missing == 1,] <- 0

#Add indicator variables for to inicate rows with missing values on predictor variables
risk_dummy$health_cover_miss <- health_cover_missing
risk_dummy$bmi_miss <- bmi_missing

#Remove Rows with Missing Outcome Variable
risk_dummy_cc <- cc(risk_dummy)

#Perform Analysis
fit_dummy <- glm(health_good ~ health_cover + bmi + age + health_cover_miss + bmi_miss, 
                         data = risk_dummy_cc, 
                         family = binomial(link = 'logit'))
summary(fit_dummy)

```
#### Equation: Dummy Variable Method 
$$HEALTH\_GOOD = 2.27 +   0.65*HEALTH\_COVER +  -0.01*BMI + -0.03*AGE + \\ -22.21*MISSING\_HEALTH\_COVER + --22.07*MISSING\_BMI $$


#### 5. LVCF (if applicable to your data).

*My data is cross-sectional so the LVCF method is not applicable to my data.*

#### 6. Hotdecking (nearest neighbor).
```{r Hotdecking }

# Using Manhattan distance and variance as weight to rescale variables:
risk_hot_deck <- impute.NN_HD(DATA=risk_MAR, 
                                 distance="eukl", 
                                 donor_limit = 2, 
                                 optimal_donor = 'mmin',
                                 weights="var", 
                                 diagnose = 'diagnostics')
#Perform Analysis
fit_hot_deck <- glm(health_good ~ health_cover + bmi + age, 
                         data = risk_hot_deck, 
                         family = binomial(link = 'logit'))
summary(fit_hot_deck)

```
#### Equation: Hotdecking Method  
$$HEALTH\_GOOD =  3.66 +  0.82*HEALTH\_COVER +  -0.06*BMI + -0.03*AGE$$

#### 7. Regression imputation. 
*(Note you might have to use logistic or multinomial models, depending on what type of variable you impute values for.)*
```{r Regression Imputation}

risk_imp_reg <- risk_MAR 
df_cc <- risk_MAR[complete.cases(risk_MAR) , ] #Subset complete cases (cc)

#BMI: Regression Imputation 
Ry <- as.numeric(!is.na(risk_MAR$bmi))# Missing data indicator
bmi_miss <- risk_MAR[Ry == 0 , ] #Subset rows with missing BMI values
mod_reg_imp <- lm(bmi ~ age + health_good + health_cover, data = df_cc) #Run model on cc data
bmi_imp_reg <- predict(mod_reg_imp, newdata = bmi_miss) #Use model to predict missing values
risk_imp_reg$bmi[Ry ==0] <- bmi_imp_reg  #Replace missing values

#HEALTH INSURANCE COVERAGE: Regression Imputation 
Ry <- as.numeric(!is.na(risk_MAR$health_cover)) # Missing data indicator
health_cover_miss <- risk_imp_reg[Ry == 0 , ] #Subset rows with missing HEALTH_COVER values
health_cover_mod <- glm(health_cover ~ age + bmi + health_good, 
                        data = df_cc,
                        family = binomial(link = 'logit')) #Fit model on cc data
health_cover_probs <- predict(health_cover_mod, 
                              newdata = health_cover_miss,
                              type = 'response') #Predict Probability for missing data
heath_cover_imp_reg <-  as.integer(round(health_cover_probs)) #Round probs to 0/1
risk_imp_reg$health_cover[Ry == 0] <- heath_cover_imp_reg  #Replace missing values

#GOOD HEALTH: Regression Imputation 
Ry <- as.numeric(!is.na(risk_MAR$health_good)) # Missing data indicator
health_good_miss <- risk_imp_reg[Ry == 0 , ] #Subset rows with missing HEALTH_COVER values
health_good_mod <- glm(health_good ~ age + bmi + health_cover, 
                        data = df_cc,
                        family = binomial(link = 'logit')) #Fit model on cc data
health_good_probs <- predict(health_good_mod, 
                              newdata = health_good_miss,
                              type = 'response') #Predict Probability for missing data
heath_good_imp_reg <-  as.integer(health_good_probs) #Round probs to 0/1
risk_imp_reg$health_good[Ry == 0] <- heath_good_imp_reg  #Replace missing COVER values
head(risk_imp_reg, n = 30)
#Perform Analysis
fit_imp_reg <- glm(health_good ~ health_cover + bmi + age, 
                         data = risk_imp_reg, 
                         family = binomial(link = 'logit'))
summary(fit_imp_reg)
```
#### Equation: Regression Imputation 
$$HEALTH\_GOOD = 2.43 + 1.02*HEALTH\_COVER + -0.05*BMI + -0.02*AGE$$

#### 8. Regression imputation with Noise 
*Perform only on numerical and dichotomous variables.*

```{r Regression Imputation with Noise}

risk_imp_stoch <- risk_MAR 

#BMI: Stochastic Imputation 
Ry <- as.numeric(!is.na(risk_MAR$bmi))# Missing data indicator
bmi_miss <- risk_MAR[Ry == 0 , ] #Subset rows with missing BMI values
df_cc <- risk_MAR[complete.cases(risk_MAR) , ] #Subset complete cases (cc)
mod_reg_imp <- lm(bmi ~ age + health_good + health_cover, data = df_cc) #Run model on cc data
bmi_imp <- predict(mod_reg_imp, newdata = bmi_miss) #Use model to predict missing BMI values
noise  <- rnorm(length(bmi_imp), 0, summary(mod_reg_imp)$sigma) #Generate noise
bmi_imp_stoch <- bmi_imp + noise #Combine predictions with noise
risk_imp_stoch$bmi[Ry ==0] <- bmi_imp_stoch  #Replace missing values

#HEALTH INSURANCE COVERAGE: Stochastic Imputation 
Ry <- as.numeric(!is.na(risk_MAR$health_cover)) # Missing data indicator
health_cover_miss <- risk_MAR[Ry == 0 , ] #Subset rows with missing HEALTH_COVER values
health_cover_mod <- glm(health_cover ~ age + bmi + health_good, 
                        data = df_cc,
                        family = binomial(link = 'logit')) #Fit model on cc data
health_cover_probs <- predict(health_cover_mod, 
                              newdata = health_cover_miss,
                              type = 'response') #Predict Probability for missing data
heath_cover_imp_stoch <-  rbinom(n = length(health_cover_probs), 
                            size = 1,
                            prob = health_cover_probs) #Draw from binomial distribution
risk_imp_stoch$health_cover[Ry == 0] <- heath_cover_imp_stoch  #Replace missing values

#GOOD HEALTH: Stochastic Imputation 
Ry <- as.numeric(!is.na(risk_MAR$health_good)) # Missing data indicator
health_good_miss <- risk_MAR[Ry == 0 , ] #Subset rows with missing HEALTH_COVER values
health_good_mod <- glm(health_good ~ age + bmi + health_cover, 
                        data = df_cc,
                        family = binomial(link = 'logit')) #Fit model on cc data
health_good_probs <- predict(health_good_mod, 
                              newdata = health_good_miss,
                              type = 'response') #Predict Probability for missing data
heath_good_imp_stoch <-  rbinom(n = length(health_good_probs), 
                            size = 1,
                            prob = health_good_probs) #Draw from binomial distribution
risk_imp_stoch$health_good[Ry == 0] <- heath_good_imp_stoch  #Replace missing COVER values

#Perform Analysis
fit_imp_stoch <- glm(health_good ~ health_cover +bmi + age, 
                         data = risk_imp_stoch, 
                         family = binomial(link = 'logit'))
summary(fit_imp_stoch)

```
#### Equation: Regression with Noise Imputation 
$$HEALTH\_GOOD = 3.64 + .77*HEALTH\_COVER + -0.06*BMI + - 0.03*AGE$$


### Multiple imputation with either mi or mice package:

####  9. Load your data into the package. Obtain summary, histogram and image of the data.
```{r}
risk_mdf <- missing_data.frame(risk_MAR)
```

##### A) Summary
```{r MI Summary}
summary(risk_mdf)
```

##### B) Histogram

```{r MI Histogram}
hist(risk_mdf, ask = F)
```

##### C) Image
```{r MI Image}

image(risk_mdf, grayscale = TRUE)

```

### 10. Check your data types and make changes if necessary.
```{r}
show(risk_mdf)
```
There do not seem to be any need for any changes.  *BMI* is continuous, so the imputation method is identity link, which is identical to a regular linear regression model.  *Health_Cover* and *Health_Good* are both binary variables, so they should imputed with binomial or logistiic regression models with a logit link.  *Age* is not missing any data, so there is no need to impute it. 

### 11. Run the mi command and check convergence by traceplots.
```{r MI Command}
risk_imp_MI <- mi(risk_mdf, n.chains = 5, n.iter = 30, verbose = F, seed = 2013)

```


####Trace Plots
```{r Trace Plots from MI model}

converged <- mi2BUGS(risk_imp_MI)

mean_bmi <- converged[, , 1]
mean_health_cover <- converged[, , 2]
mean_health_good <- converged[, , 3]

ts.plot(mean_bmi[,1], col=1, main = 'BMI Traceplot')
lines(mean_bmi[,2], col= 2)
lines(mean_bmi[,3], col= 3)
lines(mean_bmi[,4], col= 4)
lines(mean_bmi[,5], col= 4)

ts.plot(mean_health_cover[,1], col=1,  main = 'Health Cover Traceplot')
lines(mean_health_cover[,2], col= 2)
lines(mean_health_cover[,3], col= 3)
lines(mean_health_cover[,4], col= 4)
lines(mean_health_cover[,5], col= 4)

ts.plot(mean_health_good[,1], col=1,  main = 'Good Health Traceplot')
lines(mean_health_good[,2], col= 2)
lines(mean_health_good[,3], col= 3)
lines(mean_health_good[,4], col= 4)
lines(mean_health_good[,5], col= 4)

```

### 12. Check r-hats.
```{r}

```

### 13. Increase number of imputations if necessary.
```{r}
risk_imp_mi_60 <- mi(risk_MAR, verbose = F, n.iter = 60, seed = 2013)

```
###### 14. Plot diagnostics.
```{r}
plot(risk_imp_mi_60, ask = F)
```
###### 15. Change imputation models if necessary.
```{r}

```
###### 16. Run pooled analysis.
```{r}
fit_risk_imp_mi_60 <- mi::pool(health_good ~ health_cover + age + bmi, data = risk_imp_mi_60)
summary(fit_risk_imp_mi_60)
```

#  PART C:  SUMMARY TABLE
*Table with results from all imputation methods.*
```{r}

prepare_table <- function(x, vars = 4){
  
  vars_select <- 1:vars
  x <- summary(x)
  Estimate <- coef(x)[vars_select, 1]
  SE <- coef(x)[vars_select, 2]
  d  <- cbind( Estimate, SE )
  return(d)
}

summary(fit_dummy)
model_list <- list(fit_list_wise, fit_imp_mean_mode, fit_dummy, fit_imp_rand, 
                      fit_hot_deck, fit_imp_reg, fit_imp_stoch, fit_risk_imp_mi_60)
summ_table <- model_list %>% 
                    lapply(prepare_table) %>% 
                    lapply(function(x) {round(x, 2)}) %>% 
                    bind_cols 

dim(summ_table)
kable(summ_table)

# add_header_above(c(" " = 1, "Group 1" = 2, "Group 2" = 2, "Group 3" = 2))
```


#  PART D: DISCUSSION/COMPARING METHODS



# Citations
Dieter William Joenssen (2015). *HotDeckImputation: Hot Deck Imputation Methods for Missing       Data*. R package version1.1.0. https://CRAN.R-project.org/package=HotDeckImputation

