---
title: 'APSTA-2013: Final Project'
author: "William Spagnola"
date: "3/15/2019"
output: pdf_document
---

```{r Setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(mice)
library(tidyverse)
library(naniar)
library(stargazer)
library(mi)
library(HotDeckImputation)
library(knitr)
library(kableExtra)
```




# PART A: INTRODUCTION

```{r Load and Clean Data}
set.seed(2013)

### Load Data 
risk_sub <- read.csv('Data/risk_sub.csv')
rownames(risk_sub) <- NULL

#Convert Health_general and health_cover to binary variables coded 1 and 0
risk_sub$health_cover <- ifelse(risk_sub$health_cover=='Yes', 1, 0)
risk_sub$health_good <- ifelse(risk_sub$health_general %in% c('Excellent', 'VeryGood', 'Good'), 1, 0)

#Drop Id, Healh_general and Smoking Variables 
risk_sub <- risk_sub[, -which(names(risk_sub) %in% c('id', 'health_general', 'smoke_days'))]
head(risk_sub)
```

#### Dataset
My dataset is a subset of the Behavioral Risk Factor Surveillance System (BRFSS), which I obtained from the naniar package.  I kept four of the 34 variables from the original datset: age, BMI, health insurance coverage (*health_cover*), and general self-reported health (*health_general*).  Age and BMI are continuous variables and are self-explanatory.  *Health_cover* is a binary variable that is coded 1 for subjects who reporting having health insurance and 0 for subjects who did not have insurance.  *Health_general* was an ordinal factor that was measured on a five point scale: Poor, Fair, Good, Very Good and Excellent.  In order to simplify my analysis, I recoded *health_general* as a binary variable called *health_good* in which 'fair' or 'poor' was coded as 0 and 'good', 'very good', and 'excellent' was coded as 1.  

#### Analysis 
My analysis plan was to predict 'good health' (*health_good*) based on each subject's age, BMI, and health insurance coverage (*health_cover*).  Since *health_good* was a binary variable, I would use binomial logistic regression to accomplish this goal.  

#### Missing Data

In the original dataset, all the variables were completely observed except BMI, in which 4.5% cases were missing.  
```{r Explore Missing Data in Original Dataset}
 sapply(risk_sub, function(x) mean(is.na(x)))
```

Consequently, I had to generate missing data in order to explore different imputation methods.  I used the ampute function from the mice package to generate missing data at random. After generating the missing data, I replaced the age variable with the original completely observed column from the original dataset in order to have one completely observed.



#### Create Missing Data Pattern Matrix
```{r Missing Data Pattern Matrix}

#Generate Patterns of Rows with 2 missing variables
mixed_missing_patterns_1 <- c(1, 0, 0)
mixed_missing_patterns_2 <- c(0, 1, 0 )
mixed_missing_patterns_3 <- c(0, 0, 1 )


pattern_matrix <- rbind(ampute.default.patterns(3),
                        mixed_missing_patterns_1, mixed_missing_patterns_2,
                        mixed_missing_patterns_3)
row.names(pattern_matrix) <- NULL
pattern_matrix
```

#### Use Ampute Function
```{r Ampute Function}

#Get index of Rows to Generate MAR
missing_row_idx <- complete.cases(risk_sub[ , ])

#Create new data.frame to use for MAR data
risk_MAR <- risk_sub

#Use ampute function to generate missing data in bmi and health_cover columns
a <- ampute(risk_sub[ missing_row_idx , ],
            bycases = F,
            prop = .16)

#WITH DIFFERENT MISSING DATA PATTERNS
#Use ampute function to generate missing data in bmi and health_cover columns
# a <- ampute(risk_sub[ missing_row_idx , MAR_idx], 
#             bycases = F, 
#             pattern = pattern_matrix,
#             prop = .2)

#Replace data with MAR data generated by ampute function
risk_MAR[missing_row_idx , ] <-  a$amp

#Replace age with original data so that I have one completely observed continous variable
risk_MAR$age <- risk_sub$age
```


### Examine Missing Data
```{r Examine Missing Data}
miss_prop_summary(risk_MAR)
miss_var_summary(risk_MAR)
```



# PART B:  METHODS

#### Full Dataset
```{r}
risk_full  <- risk_sub[complete.cases(risk_sub) ,] 
fit_full <- glm(formula = health_good ~ health_cover + age + bmi, data = risk_full,
                 family = binomial)
summary(fit_full)
```



#### 1. Listwise deletion.
```{r Listwise Deletion Method}

risk_CC <- cc(risk_MAR)
fit_list_wise <-glm(health_good ~ bmi + age + health_cover, 
            data =risk_CC, family = binomial(link = 'logit'))
summary(fit_list_wise)
```


**Report Formula for listwise deletion model**
$$HEALTH\_GOOD = 2.27 +  -0.01*BMI + -0.03*AGE +  0.66*HEALTH\_COVER$$


### 2. Mean/mode imputation.
```{r Mean/Mode Imputation}
#Function for Mean Imputation
mean.imp <- function (a){
  missing <- is.na(a)
  a.obs <- a[!missing]
  imputed <- a
  imputed[missing] <- mean(a.obs)
  return (imputed)
}

#Function for Mode 
mode = function(x) {
  ta = table(x)
  tam = max(ta)
  if (all(ta == tam))
    mod = NA
  else
    mod = names(ta)[ta == tam]
  return(mod)
}


#Function for Mode Imputation
mode.imp <- function (a) {
  missing <- is.na(a)
  a.obs <- a[!missing]
  imputed <- a
  imputed[missing] <- mode(a.obs)
  # Output the imputed vector
  return(imputed)
}

#Create A Duplicate Dataset
risk_imp_mean <- risk_MAR

#Apply Mode Imputation to Indicator Variables (Health_Good & Health_Cover)
risk_imp_mean$health_cover <- as.integer(mode.imp(risk_MAR$health_cover))
risk_imp_mean$health_good <- as.integer(mode.imp(risk_MAR$health_good))

#Apply Mean Imputation to Continuous Variables (BMI)
risk_imp_mean$bmi <- mean.imp(risk_MAR$bmi)

#Perform Analysis
fit_imp_mean_mode <- glm(health_good ~ health_cover +bmi + age, 
                         data = risk_imp_mean, 
                         family = binomial(link = 'logit'))
summary(fit_imp_mean_mode)
```

#### Equation: Mean/Mode Imputation  
$$HEALTH\_GOOD =   2.05 + 1.24*HEALTH\_COVER + -0.01*BMI + - 0.03*AGE$$

### 3. Random imputation.
```{r Random Imputation}


## Simple random imputation
random.imp <- function (a){
  missing <- is.na(a)
  n.missing <- sum(missing)
  a.obs <- a[!missing]
  imputed <- a
  imputed[missing] <- sample(a.obs, n.missing, replace=TRUE)
  return (imputed)
}

#Perform Random Imputation
risk_imp_rand <- risk_MAR
risk_imp_rand$bmi <- random.imp(risk_MAR$bmi)
risk_imp_rand$health_cover <- random.imp(risk_MAR$health_cover)
risk_imp_rand$health_good <- random.imp(risk_MAR$health_good)

#Perform Analysis
fit_imp_rand <- glm(health_good ~ health_cover + bmi + age, 
                         data = risk_imp_rand, 
                         family = binomial(link = 'logit'))
summary(fit_imp_rand)

```
#### Equation: Random Imputation 
$$HEALTH\_GOOD = 2.46 + 0.36*HEALTH\_COVER + -0.02*BMI + -0.02*AGE$$

#### 4. Dummy variable on predictor variables.
```{r}

#Create Indicator Variabler
health_cover_missing <- is.na(risk_MAR$health_cover)*1
bmi_missing <- is.na(risk_MAR$bmi)*1

risk_dummy <- risk_MAR

#Add arbitrary number for missing values of predictors
risk_dummy[bmi_missing == 1,] <- 0
risk_dummy[health_cover_missing == 1,] <- 0

#Add indicator variables for to inicate rows with missing values on predictor variables
risk_dummy$health_cover_miss <- health_cover_missing
risk_dummy$bmi_miss <- bmi_missing

#Remove Rows with Missing Outcome Variable
risk_dummy_cc <- cc(risk_dummy)

#Perform Analysis
fit_dummy <- glm(health_good ~ health_cover + bmi + age + health_cover_miss + bmi_miss, 
                         data = risk_dummy_cc, 
                         family = binomial(link = 'logit'))
summary(fit_dummy)

```
#### Equation: Dummy Variable Method 
$$HEALTH\_GOOD = 2.27 +   0.65*HEALTH\_COVER +  -0.01*BMI + -0.03*AGE + \\ -22.21*MISSING\_HEALTH\_COVER + --22.07*MISSING\_BMI $$


#### 5. LVCF (if applicable to your data).

*My data is cross-sectional so the LVCF method is not applicable to my data.*

#### 6. Hotdecking (nearest neighbor).
```{r Hotdecking }

# Using Manhattan distance and variance as weight to rescale variables:
risk_hot_deck <- impute.NN_HD(DATA=risk_MAR, 
                                 distance="eukl", 
                                 donor_limit = 2, 
                                 optimal_donor = 'mmin',
                                 weights="var", 
                                 diagnose = 'diagnostics')
#Perform Analysis
fit_hot_deck <- glm(health_good ~ health_cover + bmi + age, 
                         data = risk_hot_deck, 
                         family = binomial(link = 'logit'))
summary(fit_hot_deck)

```
#### Equation: Hotdecking Method  
$$HEALTH\_GOOD =  3.66 +  0.82*HEALTH\_COVER +  -0.06*BMI + -0.03*AGE$$

#### 7. Regression imputation. 
*(Note you might have to use logistic or multinomial models, depending on what type of variable you impute values for.)*
```{r Regression Imputation}

risk_imp_reg <- risk_MAR 
df_cc <- risk_MAR[complete.cases(risk_MAR) , ] #Subset complete cases (cc)

#BMI: Regression Imputation 
Ry <- as.numeric(!is.na(risk_MAR$bmi))# Missing data indicator
bmi_miss <- risk_MAR[Ry == 0 , ] #Subset rows with missing BMI values
mod_reg_imp <- lm(bmi ~ age + health_good + health_cover, data = df_cc) #Run model on cc data
bmi_imp_reg <- predict(mod_reg_imp, newdata = bmi_miss) #Use model to predict missing values
risk_imp_reg$bmi[Ry ==0] <- bmi_imp_reg  #Replace missing values

#HEALTH INSURANCE COVERAGE: Regression Imputation 
Ry <- as.numeric(!is.na(risk_MAR$health_cover)) # Missing data indicator
health_cover_miss <- risk_imp_reg[Ry == 0 , ] #Subset rows with missing HEALTH_COVER values
health_cover_mod <- glm(health_cover ~ age + bmi + health_good, 
                        data = df_cc,
                        family = binomial(link = 'logit')) #Fit model on cc data
health_cover_probs <- predict(health_cover_mod, 
                              newdata = health_cover_miss,
                              type = 'response') #Predict Probability for missing data
heath_cover_imp_reg <-  as.integer(round(health_cover_probs)) #Round probs to 0/1
risk_imp_reg$health_cover[Ry == 0] <- heath_cover_imp_reg  #Replace missing values

#GOOD HEALTH: Regression Imputation 
Ry <- as.numeric(!is.na(risk_MAR$health_good)) # Missing data indicator
health_good_miss <- risk_imp_reg[Ry == 0 , ] #Subset rows with missing HEALTH_COVER values
health_good_mod <- glm(health_good ~ age + bmi + health_cover, 
                        data = df_cc,
                        family = binomial(link = 'logit')) #Fit model on cc data
health_good_probs <- predict(health_good_mod, 
                              newdata = health_good_miss,
                              type = 'response') #Predict Probability for missing data
heath_good_imp_reg <-  as.integer(health_good_probs) #Round probs to 0/1
risk_imp_reg$health_good[Ry == 0] <- heath_good_imp_reg  #Replace missing COVER values
head(risk_imp_reg, n = 30)
#Perform Analysis
fit_imp_reg <- glm(health_good ~ health_cover + bmi + age, 
                         data = risk_imp_reg, 
                         family = binomial(link = 'logit'))
summary(fit_imp_reg)
```
#### Equation: Regression Imputation 
$$HEALTH\_GOOD = 2.43 + 1.02*HEALTH\_COVER + -0.05*BMI + -0.02*AGE$$

#### 8. Regression imputation with Noise 
*Perform only on numerical and dichotomous variables.*

```{r Regression Imputation with Noise}

risk_imp_stoch <- risk_MAR 

#BMI: Stochastic Imputation 
Ry <- as.numeric(!is.na(risk_MAR$bmi))# Missing data indicator
bmi_miss <- risk_MAR[Ry == 0 , ] #Subset rows with missing BMI values
df_cc <- risk_MAR[complete.cases(risk_MAR) , ] #Subset complete cases (cc)
mod_reg_imp <- lm(bmi ~ age + health_good + health_cover, data = df_cc) #Run model on cc data
bmi_imp <- predict(mod_reg_imp, newdata = bmi_miss) #Use model to predict missing BMI values
noise  <- rnorm(length(bmi_imp), 0, summary(mod_reg_imp)$sigma) #Generate noise
bmi_imp_stoch <- bmi_imp + noise #Combine predictions with noise
risk_imp_stoch$bmi[Ry ==0] <- bmi_imp_stoch  #Replace missing values

#HEALTH INSURANCE COVERAGE: Stochastic Imputation 
Ry <- as.numeric(!is.na(risk_MAR$health_cover)) # Missing data indicator
health_cover_miss <- risk_MAR[Ry == 0 , ] #Subset rows with missing HEALTH_COVER values
health_cover_mod <- glm(health_cover ~ age + bmi + health_good, 
                        data = df_cc,
                        family = binomial(link = 'logit')) #Fit model on cc data
health_cover_probs <- predict(health_cover_mod, 
                              newdata = health_cover_miss,
                              type = 'response') #Predict Probability for missing data
heath_cover_imp_stoch <-  rbinom(n = length(health_cover_probs), 
                            size = 1,
                            prob = health_cover_probs) #Draw from binomial distribution
risk_imp_stoch$health_cover[Ry == 0] <- heath_cover_imp_stoch  #Replace missing values

#GOOD HEALTH: Stochastic Imputation 
Ry <- as.numeric(!is.na(risk_MAR$health_good)) # Missing data indicator
health_good_miss <- risk_MAR[Ry == 0 , ] #Subset rows with missing HEALTH_COVER values
health_good_mod <- glm(health_good ~ age + bmi + health_cover, 
                        data = df_cc,
                        family = binomial(link = 'logit')) #Fit model on cc data
health_good_probs <- predict(health_good_mod, 
                              newdata = health_good_miss,
                              type = 'response') #Predict Probability for missing data
heath_good_imp_stoch <-  rbinom(n = length(health_good_probs), 
                            size = 1,
                            prob = health_good_probs) #Draw from binomial distribution
risk_imp_stoch$health_good[Ry == 0] <- heath_good_imp_stoch  #Replace missing COVER values

#Perform Analysis
fit_imp_stoch <- glm(health_good ~ health_cover +bmi + age, 
                         data = risk_imp_stoch, 
                         family = binomial(link = 'logit'))
summary(fit_imp_stoch)

```
#### Equation: Regression with Noise Imputation 
$$HEALTH\_GOOD = 3.64 + .77*HEALTH\_COVER + -0.06*BMI + - 0.03*AGE$$


### Multiple imputation with either mi or mice package:

####  9. Load your data into the package. Obtain summary, histogram and image of the data.
```{r}
risk_mdf <- missing_data.frame(risk_MAR)
```

##### A) Summary
```{r MI Summary}
summary(risk_mdf)
```

##### B) Histogram

```{r MI Histogram}
hist(risk_mdf, ask = F)
```

##### C) Image
```{r MI Image}

image(risk_mdf, grayscale = TRUE)

```

### 10. Check your data types and make changes if necessary.
```{r}
show(risk_mdf)
```
There do not seem to be any need for any changes.  *BMI* is continuous, so the imputation method is identity link, which is identical to a regular linear regression model.  *Health_Cover* and *Health_Good* are both binary variables, so they should imputed with binomial or logistiic regression models with a logit link.  *Age* is not missing any data, so there is no need to impute it. 

### 11. Run the mi command and check convergence by traceplots.
```{r MI Command}
risk_imp_MI <- mi(risk_mdf, n.chains = 5, n.iter = 30, verbose = F, seed = 2013)

```


####Trace Plots
```{r Trace Plots from MI model}

converged <- mi2BUGS(risk_imp_MI)

mean_bmi <- converged[, , 1]
mean_health_cover <- converged[, , 2]
mean_health_good <- converged[, , 3]

ts.plot(mean_bmi[,1], col=1, main = 'BMI Traceplot')
lines(mean_bmi[,2], col= 2)
lines(mean_bmi[,3], col= 3)
lines(mean_bmi[,4], col= 4)
lines(mean_bmi[,5], col= 4)

ts.plot(mean_health_cover[,1], col=1,  main = 'Health Cover Traceplot')
lines(mean_health_cover[,2], col= 2)
lines(mean_health_cover[,3], col= 3)
lines(mean_health_cover[,4], col= 4)
lines(mean_health_cover[,5], col= 4)

ts.plot(mean_health_good[,1], col=1,  main = 'Good Health Traceplot')
lines(mean_health_good[,2], col= 2)
lines(mean_health_good[,3], col= 3)
lines(mean_health_good[,4], col= 4)
lines(mean_health_good[,5], col= 4)

```

### 12. Check r-hats.
```{r}
Rhats(risk_imp_MI)
```

All of the r-hates are closer to 1 than 1.1, which is a good sign.  


### 13. Increase number of imputations if necessary.
```{r}
risk_imp_mi_60 <- mi(risk_MAR, verbose = F, n.iter = 60, seed = 2013)

```
###### 14. Plot diagnostics.
```{r}
plot(risk_imp_mi_60, ask = F)
```
###### 15. Change imputation models if necessary.
```{r}

```
###### 16. Run pooled analysis.
```{r}
fit_risk_imp_mi_60 <- mi::pool(health_good ~ health_cover + age + bmi, data = risk_imp_mi_60)
summary(fit_risk_imp_mi_60)
```

#  PART C:  SUMMARY TABLE



*Table with results from all imputation methods.*
```{r}

# prepare_table <- function(x, vars = 4){
#   
#   vars_select <- 1:vars
#   x <- summary(x)
#   Estimate <- coef(x)[vars_select, 1]
#   SE <- coef(x)[vars_select, 2]
#   d  <- cbind( Estimate, SE )
#   return(d)
# }

prepare_table <- function(x,  model_name, vars = 4){
  require(magrittr)
  estimates <-   coef(summary(x))[1:vars, 1]  %>% t 
  standard_errors <- coef(summary(x))[1:vars, 2]  %>%  t
  colnames(standard_errors) <- paste('SE', colnames(standard_errors), sep = '_')
  d <- cbind(estimates, standard_errors)
  d <- round(d, 2)
  d <- cbind(model_name, d)
  d <- as.data.frame(d)
  return(d)

}

#Get Coefs from Each Model 
listwise_coefs <- prepare_table(fit_list_wise, model_name ='Listwise')  
mean_coefs <-prepare_table(fit_imp_mean_mode, model_name = 'Mean')
random_coefs <- prepare_table(fit_imp_rand, model_name = 'Random')
dummy_coefs <- prepare_table(fit_dummy, model_name = 'Dummy')
hot_deck_coefs <- prepare_table( fit_hot_deck, model_name = 'Hot Deck')
regression_coefs <- prepare_table(fit_imp_reg, model_name = 'Regression')
stoch_coefs <- prepare_table(fit_imp_stoch, model_name = 'Stochastic')
mi_coefs <-  prepare_table( fit_risk_imp_mi_60, model_name = 'Multi. Imp.')
names(mi_coefs)[grepl(names(mi_coefs), pattern ='health_cover')] <- c("health_cover", "SE_health_cover")
full_coefs <- prepare_table(fit_full, "Full Data")

#Bind All Coefficients into One Table 
summ_table <- listwise_coefs %>% 
                  rbind(mean_coefs) %>% 
                  rbind(random_coefs) %>% 
                  rbind(dummy_coefs) %>% 
                  rbind(hot_deck_coefs) %>% 
                  rbind(regression_coefs) %>% 
                  rbind(stoch_coefs) %>% 
                  rbind(mi_coefs) %>% 
                  rbind(full_coefs)



summ_table <- summ_table %>% 
  select(model_name, `(Intercept)`, `SE_(Intercept)`, age, SE_age, bmi, SE_bmi, 
         health_cover, SE_health_cover)

names(summ_table) <- c('Model', rep(c('Est.', 'SE'), 4))
kable(summ_table) %>% 
add_header_above(c(" " = 1, "Intercept" = 2, "Age" = 2, "BMI" = 2,
                   'Health Cover' = 2)) %>% 
row_spec(9, italic= T) 

```


